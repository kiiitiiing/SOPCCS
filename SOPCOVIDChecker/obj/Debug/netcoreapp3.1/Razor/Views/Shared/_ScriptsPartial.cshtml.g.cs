#pragma checksum "D:\Systems\SOPCCS\SOPCOVIDChecker\Views\Shared\_ScriptsPartial.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e006668b263a322c3ea4c3dce3c57d2a3db3de9a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared__ScriptsPartial), @"mvc.1.0.view", @"/Views/Shared/_ScriptsPartial.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Systems\SOPCCS\SOPCOVIDChecker\Views\_ViewImports.cshtml"
using SOPCOVIDChecker;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Systems\SOPCCS\SOPCOVIDChecker\Views\_ViewImports.cshtml"
using SOPCOVIDChecker.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Systems\SOPCCS\SOPCOVIDChecker\Views\_ViewImports.cshtml"
using SOPCOVIDChecker.Models.ResuViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Systems\SOPCCS\SOPCOVIDChecker\Views\_ViewImports.cshtml"
using SOPCOVIDChecker.Models.AccountViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Systems\SOPCCS\SOPCOVIDChecker\Views\_ViewImports.cshtml"
using SOPCOVIDChecker.Models.SopViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Systems\SOPCCS\SOPCOVIDChecker\Views\_ViewImports.cshtml"
using SOPCOVIDChecker.Models.ResultViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Systems\SOPCCS\SOPCOVIDChecker\Views\_ViewImports.cshtml"
using SOPCOVIDChecker.Models.AdminViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Systems\SOPCCS\SOPCOVIDChecker\Views\_ViewImports.cshtml"
using SOPCOVIDChecker.Models.ViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Systems\SOPCCS\SOPCOVIDChecker\Views\_ViewImports.cshtml"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Systems\SOPCCS\SOPCOVIDChecker\Views\_ViewImports.cshtml"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Systems\SOPCCS\SOPCOVIDChecker\Views\_ViewImports.cshtml"
using SOPCOVIDChecker.Services;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e006668b263a322c3ea4c3dce3c57d2a3db3de9a", @"/Views/Shared/_ScriptsPartial.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d24f3d626af1eda3b26526485233e1624bc76d60", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared__ScriptsPartial : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<script>

    var loadingSnippetDiv = ""<div class='card card-primary' style='width: 100%' id='spinner_card'><div class='card-header'></div><div class='card-body'></div><div class='overlay' id='spinner_overlay'><i class='fas fa-2x fa-sync fa-spin'></i></div></div>"";
    var loadingSnippet = ""<div class='overlay' id='spinner_overlay'><i class='fas fa-2x fa-sync fa-spin'></i></div>"";

    $(function () {

        $('.readonly').keydown(function (e) {
            e.preventDefault();
        });
        $('#form_modal').on('hidden.bs.modal', function () {
            $('#form_modal .modal-dialog').removeClass('modal-sm');
            $('#form_modal .modal-dialog').removeClass('modal-def');
            $('#form_modal .modal-dialog').removeClass('modal-lg');
            $('#form_modal .modal-dialog').removeClass('modal-xl');
        });
    });

    function Employed(value) {
        value.toggle();
    }

    function LoadViewModal(id) {
        var url = '");
#nullable restore
#line 24 "D:\Systems\SOPCCS\SOPCOVIDChecker\Views\Shared\_ScriptsPartial.cshtml"
              Write(Url.Action("ViewResultForm", "Result"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"';
        $.ajax({
            url: url + ""?resultId="" + id,
            tpye: 'get',
            async: true
        });
    }

    function SameAddressToggle(field) {
        field.toggle();
    }

    function DisabledAddress(address, disabled) {
        if (disabled == 'true') {
            address.css(""display"", ""none"");
        }
    }

    // PAGINATION
    function LoadAction(url, container) {
        $.ajax({
            url: url,
            async: true,
            beforeSend: function () {
                $('#' + container).parent().append(loadingSnippet);
            },
            success: function (output) {
                $('#spinner_overlay').remove()
                $('#' + container).html(output);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                if (xhr.status === 401) {
                    location.reload();
                }
                else {
                    alert(xhr.responseText);
                ");
            WriteLiteral(@"    alert(thrownError);
                }
            }
        });
    }

    function MuncityOnChange(id, url) {
        var barangaysSelect = $('#barangays');
        if (id != '') {
            $.when(GetBarangayFiltered(id, url)).done(function (output) {
                barangaysSelect.empty()
                    .append($('<option>', {
                        value: '',
                        text: 'Select Barangay'
                    }));
                jQuery.each(output, function (i, item) {
                    barangaysSelect.append($('<option>', {
                        value: item.id,
                        text: item.description
                    }));
                });
            });
        }
        else {
            barangaysSelect.empty()
                .append($('<option>', {
                    value: '',
                    text: 'Select Barangay'
                }));
        }
    }

    function PMuncityOnChange(id, url) {
        var barangay");
            WriteLiteral(@"sSelect = $('#pbarangays');
        if (id != '') {
            $.when(GetBarangayFiltered(id, url)).done(function (output) {
                barangaysSelect.empty()
                    .append($('<option>', {
                        value: '',
                        text: 'Select Barangay'
                    }));
                jQuery.each(output, function (i, item) {
                    barangaysSelect.append($('<option>', {
                        value: item.id,
                        text: item.description
                    }));
                });
            });
        }
        else {
            barangaysSelect.empty()
                .append($('<option>', {
                    value: '',
                    text: 'Select Barangay'
                }));
        }
    }

    function ProvinceOnChange(id, url) {
        var MuncitySelect = $('#muncityFilters');
        if (id != '') {
            $.when(GetMuncityFiltered(id, url)).done(function (output) {
           ");
            WriteLiteral(@"     MuncitySelect.empty()
                    .append($('<option>', {
                        value: '',
                        text: 'Select City/Municipality'
                    }));
                jQuery.each(output, function (i, item) {
                    MuncitySelect.append($('<option>', {
                        value: item.id,
                        text: item.description
                    }));
                });
            });
        }
        else {
            MuncitySelect.empty()
                .append($('<option>', {
                    value: '',
                    text: 'Select City/Municipality'
                }));
        }
    }

    function SetDisabled(input, attr) {
        input.attr(attr);
    }

    function CheckboxOnChange() {
        var inputOnset = $('#dateOnset');
        if (inputOnset.attr('disabled') == 'disabled') {
            inputOnset.removeAttr('disabled');
            inputOnset.attr(""data-val-required"", true);
        }
  ");
            WriteLiteral(@"      else {
            inputOnset.val('');
            inputOnset.attr('disabled', true);
            inputOnset.removeAttr(""data-val-required"");
        }
    }

    function CaclAge(date) {
        var birth = new Date(date);
        var curr = new Date();
        var diff = curr.getTime() - birth.getTime();
        document.getElementById(""Patient_Age"").value = Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25));
    }

    function GetMuncityFiltered(id, url) {
        var urls = url + '?provinceId=' + id;
        return $.ajax({
            url: urls,
            type: 'get',
            async: true,
            error: function (xhr, ajaxOptions, thrownError) {
                if (xhr.status === 401) {
                    location.reload();
                }
                else {
                    $('body').find('#loadings').modal('toggle');
                    alert(xhr.responseText);
                    alert(thrownError);
                }

            }
        });
");
            WriteLiteral(@"    }

    function GetBarangayFiltered(id, url) {
        var urls = url + '?muncityId=' + id;
        return $.ajax({
            url: urls,
            type: 'get',
            async: true,
            error: function (xhr, ajaxOptions, thrownError) {
                if (xhr.status === 401) {
                    location.reload();
                }
                else {
                    $('body').find('#loadings').modal('toggle');
                    alert(xhr.responseText);
                    alert(thrownError);
                }

            }
        });
    }

    function LoadingModal(id) {
        var urls = '");
#nullable restore
#line 209 "D:\Systems\SOPCCS\SOPCOVIDChecker\Views\Shared\_ScriptsPartial.cshtml"
               Write(Url.Action("ModalLoading", "Account"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"';
        return $.ajax({
            url: urls,
            type: 'get',
            async: true,
            success: function (output) {
                $(id).empty();
                $(id).html(output);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                if (xhr.status === 401) {
                    location.reload();
                }
                else {
                    $('body').find('#loadings').modal('toggle');
                    alert(xhr.responseText);
                    alert(thrownError);
                }

            }
        });
    }

    //TOAST

    function Toast(message) {
        toastr.options = {
            ""closeButton"": false,
            ""debug"": false,
            ""newestOnTop"": false,
            ""progressBar"": false,
            ""positionClass"": ""toast-bottom-right"",
            ""preventDuplicates"": false,
            ""onclick"": null,
            ""showDuration"": ""300"",
            ""hideDuration");
            WriteLiteral(@""": ""1000"",
            ""timeOut"": ""5000"",
            ""extendedTimeOut"": ""1000"",
            ""showEasing"": ""swing"",
            ""hideEasing"": ""linear"",
            ""showMethod"": ""fadeIn"",
            ""hideMethod"": ""fadeOut""
        }
        Command: toastr[""success""](message)

    }

    function AddLoading() {
        var loadi = '<div class=""d-flex justify-content-center align-items-center"" style=""position: absolute !important; top: 1; left: 50%""><i class=""fas fa-2x fa-sync fa-spin""></i></div>';
        return loadi;
    }

    function LoadPartialView(container, url) {
        $.ajax({
            url: url,
            type: 'GET',
            async: true,
            success: function (output) {
                $(container).html(output);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                if (xhr.status === 401) {
                    location.reload();
                }
                else {
                    alert(xhr.responseText");
            WriteLiteral(");\r\n                    alert(thrownError);\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    //HELPERS\r\n\r\n    //REMOVE SPINNER\r\n    function RemoveSpinner() {\r\n        $(\'#spinner_overlay\').remove();\r\n    }\r\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
